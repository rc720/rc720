#bfs alg
tree = {
    'a': ['c', 'b'],
    'c': ['f'],
    'b': ['d', 'e'],
    'f': ['c', 'e'],
    'd': ['b'],
    'e': ['f']
}
visited = []
queue = []
def bfs(visited, tree, node):
    visited.append(node)
    queue.append(node)
    while queue:
        s = queue.pop(0)
        print(s, end=" ")
        for neighbor in tree.get(s, []):
            if neighbor not in visited:
                visited.append(neighbor)
                queue.append(neighbor)
bfs(visited, tree, 'a')
#dfs alg
tree = {
    'a': ['c', 'b'],
    'c': ['f'],
    'b': ['d', 'e'],
    'f': ['c', 'e'],
    'd': ['b'],
    'e': ['f']
}
def dfs(tree, node, visited):
    if node not in visited:
        visited.append(node)
        for n in tree.get(node, []):  # Safely get the neighbors
            dfs(tree, n, visited)
    return visited
path = dfs(tree, 'a', [])
print(path)
# 4 queen/n-queen
class Solution:
    def isSafe(self, board, row, col, n):
        for i in range(col):
            if board[row][i] == 'Q':  # Check row on left side
                return False
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):  
            if board[i][j] == 'Q':
                return False
        for i, j in zip(range(row, n), range(col, -1, -1)):  
            if board[i][j] == 'Q':
                return False
        return True
    def solveNQueensUtil(self, board, col, n, result):
        if col == n:
            result.append([''.join(row) for row in board])
            return
        for row in range(n):
            if self.isSafe(board, row, col, n):
                board[row][col] = 'Q'
                self.solveNQueensUtil(board, col + 1, n, result)
                board[row][col] = '.'  
    def solveNQueens(self, n):
        board = [['.' for _ in range(n)] for _ in range(n)]
        result = []
        self.solveNQueensUtil(board, 0, n, result)
        return result
solution = Solution()
n = 4
result = solution.solveNQueens(n)
for board in result:
    for row in board:
        print(row)
    print()
# honoi
def movetower(height, A, B, C):
    if height >= 1:
        movetower(height - 1, A, C, B)
        movedisk(A, B)
        movetower(height - 1, C, B, A)
def movedisk(A, B):
    print("Moving the disk from", A, "to", B)
movetower(3, "A", "B", "C")
# tic-toc
import time
import os
board = [" "] * 10
player, win, draw, running = 1, 1, -1, 0
game = running
def drawboard():
    print(f"{board[1]}|{board[2]}|{board[3]}")
    print("-+-+-")
    print(f"{board[4]}|{board[5]}|{board[6]}")
    print("-+-+-")
    print(f"{board[7]}|{board[8]}|{board[9]}\n")
def checkposition(x):
    return board[x] == " "
def checkwin():
    global game
    win_combos = [(1,2,3), (4,5,6), (7,8,9), (1,4,7), (2,5,8), (3,6,9), (1,5,9), (3,5,7)]
    if any(board[a] == board[b] == board[c] != " " for a, b, c in win_combos):
        game = win
    elif " " not in board[1:]:
        game = draw
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')
print("TIC TAC TOE Game")
print("Player 1 is [X] and Player 2 is [O]\n")
time.sleep(2)
while game == running:
    clear_screen()
    drawboard()
    mark = "X" if player % 2 != 0 else "O"
    print(f"Player {1 if mark == 'X' else 2}'s turn ({mark})")
    try:
        choice = int(input("Enter position (1-9): "))
        if choice not in range(1, 10):
            print("Invalid input! Position must be in range [1-9].")
            time.sleep(1)
            continue
    except ValueError:
        print("Invalid input! Enter a number between 1 and 9.")
        time.sleep(1)
        continue
    if checkposition(choice):
        board[choice] = mark
        player += 1
        checkwin()
    else:
        print("Invalid move! The position is already taken.")
        time.sleep(1)
clear_screen()
drawboard()
print("It's a draw!" if game == draw else f"Player {2 if player % 2 == 0 else 1} wins!")
# shoffle deck cards
import random
suit = ["♥", "♦", "♣", "♠"]
ranks = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
deck = [(s, r) for s in suit for r in ranks]
random.shuffle(deck)
for card in deck:
    print(f"{card[1]} of {card[0]}")
# a * algo
def a_star_algorithm(startnode, stopnode):
    openset = set([startnode]) 
    closedset = set()  
    g = {}  
    parent = {}  
    g[startnode] = 0
    parent[startnode] = startnode  
    while openset:
        n = None
        for v in openset:
            if n is None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v
        if n == stopnode:
            path = []
            while parent[n] != n:
                path.append(n)
                n = parent[n]
            path.append(startnode)
            path.reverse()
            print(f"Path found: {path}")
            return path
        if n is None:
            print("Path does not exist")
            return None
        for m, weight in get_neighbors(n):
            if m not in openset and m not in closedset:
                openset.add(m)
                parent[m] = n
                g[m] = g[n] + weight
            else:
                if g[m] > g[n] + weight:
                    g[m] = g[n] + weight
                    parent[m] = n
                    if m in closedset:
                        closedset.remove(m)
                        openset.add(m)
        openset.remove(n)
        closedset.add(n)
    print("Path does not exist")
    return None
def get_neighbors(v):
    return graphnode.get(v, [])
def heuristic(n):
    h_dist = {"a": 7, "b": 6, "c": 2, "d": 0}  
    return h_dist.get(n, float('inf'))
graphnode = {
    "a": [("b", 1), ("c", 3), ("d", 7)],
    "b": [("d", 5)],
    "c": [("d", 12)],
    "d": []
}
a_star_algorithm("a", "d")
# water jag alg
capacity = (12, 8, 5)
x, y, z = capacity  
memory = {}
ans = []
def getAllStates(state):
    a, b, c = state 
    if (a, b) == (6, 6): 
        ans.append(state)
        return True
    if (a, b, c) in memory:  
        return False
    memory[(a, b, c)] = 1 
    # Pour water from jug a to jug b
    if a > 0:
        if a + b <= y: 
            if getAllStates((0, a + b, c)):
                ans.append(state)
                return True
        else:
            if getAllStates((a - (y - b), y, c)):
if a + c <= z:
            if getAllStates((0, b, a + c)):
                ans.append(state)
                return True
        else:
            if getAllStates((a - (z - c), b, z)):
                ans.append(state)
                return True
    if b > 0:
        if a + b <= x:
            if getAllStates((a + b, 0, c)):
                ans.append(state)
                return True
        else:
            if getAllStates((x, b - (x - a), c)):
                ans.append(state)
                return True
        if b + c <= z:
            if getAllStates((a, 0, b + c)):
                ans.append(state)
                return True
        else:
            if getAllStates((a, b - (z - c), z)):
                ans.append(state)
                return True
    if c > 0:
        if a + c <= x:
            if getAllStates((a + c, b, 0)):
                ans.append(state)
                return True
        else:
            if getAllStates((x, b, c - (x - a))):
                ans.append(state)
                return True
        if b + c <= y:
            if getAllStates((a, b + c, 0)):
                ans.append(state)
                return True
        else:
            if getAllStates((a, y, c - (y - b))):
                ans.append(state)
                return True
    return False
initial = (12, 0, 0)
print("Start")
getAllStates(initial)
ans.reverse()  
for i in ans:
    print(i)
# alpha-beta puring alg
tree = [[[5, 1, 2], [8, -8, -9]], [[9, 4, 5], [-3, 4, 3]]]
root = 0
pruned = 0
def children(branch, depth, alpha, beta):
    global tree
    global root
    global pruned
    i = 0
    for child in branch:
        if isinstance(child, list):
            (nalpha, nbeta) = children(child, depth + 1, alpha, beta)
            if depth % 2 == 1:
                beta = min(nalpha, beta)
            else:
                alpha = max(nbeta, alpha)
            branch[i] = alpha if depth % 2 == 0 else beta
            i += 1
        else:
            if depth % 2 == 0 and alpha < child:
                alpha = child
            if depth % 2 == 1 and beta > child:
                beta = child           
            if alpha >= beta:
                pruned += 1
                break
    if depth == root:
        tree[:] = [alpha] if root == 0 else [beta]
    return (alpha, beta)
def alphabeta(in_tree=tree, start=root, upper=-15, lower=15):
    global tree
    global pruned
    global root
    (alpha, beta) = children(tree, start, upper, lower)
    return (alpha, beta, tree, pruned)
if __name__ == "__main__":
    alpha, beta, result_tree, pruned_count = alphabeta()
    print("(alpha, beta): ", alpha, beta)
    print("Result: ", result_tree)
    print("Times pruned: ", pruned_count)
# hill climb alg
import math
increment = 0.1
startingPoint = [1, 1]
point1 = [1, 5]
point2 = [6, 4]
point3 = [5, 2]
point4 = [2, 1]
def distance(x1, y1, x2, y2): 
    dist = math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)
    return dist
def sumOfDistances(x1, y1, px1, py1, px2, py2, px3, py3, px4, py4): 
    d1 = distance(x1, y1, px1, py1)
    d2 = distance(x1, y1, px2, py2)
    d3 = distance(x1, y1, px3, py3)
    d4 = distance(x1, y1, px4, py4)
    return d1 + d2 + d3 + d4
def newDistance(x1, y1, point1, point2, point3, point4): 
    d1 = [x1, y1]
    d1temp = sumOfDistances(x1, y1, point1[0], point1[1], point2[0], point2[1], 
                            point3[0], point3[1], point4[0], point4[1])
    d1.append(d1temp)
    return d1
minDistance = sumOfDistances(startingPoint[0], startingPoint[1], 
                             point1[0], point1[1], point2[0], point2[1], 
                             point3[0], point3[1], point4[0], point4[1])
flag = True
def newPoints(minimum, d1, d2, d3, d4): 
    if d1[2] == minimum: 
        return [d1[0], d1[1]]
    elif d2[2] == minimum: 
        return [d2[0], d2[1]]
    elif d3[2] == minimum: 
        return [d3[0], d3[1]]
    elif d4[2] == minimum: 
        return [d4[0], d4[1]]
i = 1
while flag: 
    d1 = newDistance(startingPoint[0] + increment, startingPoint[1], point1, point2, point3, point4)
    d2 = newDistance(startingPoint[0] - increment, startingPoint[1], point1, point2, point3, point4)
    d3 = newDistance(startingPoint[0], startingPoint[1] + increment, point1, point2, point3, point4)
    d4 = newDistance(startingPoint[0], startingPoint[1] - increment, point1, point2, point3, point4)
    print(i, ' ', round(startingPoint[0], 2), round(startingPoint[1], 2)) 
    minimum = min(d1[2], d2[2], d3[2], d4[2])  
    if minimum < minDistance: 
        startingPoint = newPoints(minimum, d1, d2, d3, d4)
        minDistance = minimum
        i += 1  
    else:
        flag = False
# corstraint satisfaction 
def is_consistent(assignment, var, value, constraints):
    for (var1, var2), constraint in constraints.items():
        if var1 == var and var2 in assignment:
            if not constraint(value, assignment[var2]):
                return False
        if var2 == var and var1 in assignment:
            if not constraint(assignment[var1], value):
                return False
    return True
def backtracking(assignment, variables, domains, constraints):
    if len(assignment) == len(variables):
        return assignment
    var = next(v for v in variables if v not in assignment)
    for value in domains[var]:
        if is_consistent(assignment, var, value, constraints):
            assignment[var] = value
            result = backtracking(assignment, variables, domains, constraints)
            if result:
                return result
            assignment.pop(var)
    return None
variables = ['X', 'Y', 'Z']
domains = {'X': [1, 2, 3], 'Y': [1, 2, 3], 'Z': [1, 2, 3]}
constraints = {
    ('X', 'Y'): lambda x, y: x != y,
    ('Y', 'Z'): lambda y, z: y != z,
    ('X', 'Z'): lambda x, z: x != z
}
solution = backtracking({}, variables, domains, constraints)
print(solution)
#associate law
x=int(input("Enter the value for x "))
y=int(input("enter the value for y "))
z=int(input("enter the value for z "))
left=(x+y)+z
right=x+(y+z)
if(left==right):
    print(x,"+(",y,"+",z,")=(",x,"+",y,")+",z,"Therefore It follows the rule of Associative law")
else:
    print("It does not follow the rule of Associative law")
a=int(input("\n\n\n\nEnter the value for a "))
b=int(input("enter the value for b "))
c=int(input("enter the value for c "))
left=a*(b*c)
right=(a*b)*c
if(left==right):
    print(a,"(",b,"*",c,")=(",a,"*",b,")",c,"Therefore It follows the rule of Associative law")
else:
    print("It does not follow the rule of Associative law")
# distribute law
a = int(input("Enter the value for a: "))
b = int(input("Enter the value for b: "))
c = int(input("Enter the value for c: "))
left = a * (b + c)
right = (a * b) + (a * c)
if left == right:
    print(f"{a} ({b} + {c}) = {a} * {b} + {a} * {c}. Therefore, it follows the rule of Distributive law.")
else:
    print("It does not follow the rule of Distributive law.")
batsman = "sachin"
def cricketer(x):
    return batsman == x
query1 = cricketer("sachin")
query2 = cricketer("john")
query3 = cricketer(batsman)
people = {
    'john': 'male', 'jane': 'female', 'mark': 'male', 'mary': 'female',
    'paul': 'male', 'anna': 'female', 'josh': 'male', 'sara': 'female',
    'david': 'male', 'lucy': 'female', 'peter': 'male', 'linda': 'female'
}
parents = {
    'john': ['paul', 'mary'],
    'jane': ['paul', 'mary'],
    'mark': ['david', 'lucy'],
    'anna': ['david', 'lucy'],
    'josh': ['peter', 'linda'],
    'sara': ['peter', 'linda']
}
print("Queries:")
print(f"1) batsman(x): {query1}")
print(f"2) batsman(sachin): {query3}")
print(f"3) cricketer(x): {query2}")
# Define predicates
batsman (sachin)
Cricketer (x):-batsmen (x)
# Family relations rules
def father(child):
    return [p for p in parents.get(child, []) if male(p)]
def mother(child):
    return [p for p in parents.get(child, []) if female(p)]
def grandfather(person):
    parents_list = parents.get(person, [])
    return [g for p in parents_list for g in parents.get(p, []) if male(g)]
def grandmother(person):
    parents_list = parents.get(person, [])
    return [g for p in parents_list for g in parents.get(p, []) if female(g)]
def siblings(person):
    return [s for s in people if s != person and any(parent(person, p) and parent(s, p) for p in parents.get(s, []))]
def brother(person):
    return [s for s in siblings(person) if male(s)]
def sister(person):
    return [s for s in siblings(person) if female(s)]
def uncle(person):
    return [u for p in parents.get(person, []) for u in siblings(p) if male(u)]
def aunty(person):
    return [a for p in parents.get(person, []) for a in siblings(p) if female(a)]
def nephew(person):
    return [n for s in siblings(person) for n in siblings(s) if male(n)]
def niece(person):
    return [n for s in siblings(person) for n in siblings(s) if female(n)]
def cousin(person):
    return [c for u in uncle(person) + aunty(person) for c in siblings(u)]
# Query
print("Father of John:", father('john'))
print("Mother of John:", mother('john'))
print("Grandfather of John:", grandfather('john'))
print("Grandmother of John:", grandmother('john'))
print("Brother of John:", brother('john'))
print("Sister of John:", sister('john'))
print("Uncle of John:", uncle('john'))
print("Aunty of John:", aunty('john'))
print("Cousins of John:", cousin('john'))





