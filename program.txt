1b.draw a co-ordinate axis at the center of the screen
from tkinter import *
root = Tk()
c = Canvas(root, bg="black", height=500, width=500)
c.create_line(250,500,250,1, fill="yellow")
c.create_line(500,250,1,250, fill="pink")
c.pack()
root.mainloop()

2a.divide the screen into four regions and draw following objects in each regin with oppospsirte message
1,circle 2,rectangle 3,ellipse 4,half ellipse
from tkinter import*
root=Tk()
c=Canvas(root,bg="black",height=500,width=500)
c.create_line(250,500,250,1,fill="blue")
c.create_line(500,250,1,250,fill="yellow")
c.create_oval(54,55,200,190,fill="pink")
c.create_rectangle(263,165,489,83,fill="red")
c.create_oval(17,319,238,428,fill="green")
c.create_arc(261,320,492,500,start=0,extent=180,fill="lightblue")
c.create_text(120,220,text="This is a Circle",fill="white")
c.create_text(370,220,text="This is a Rectangle",fill="white")
c.create_text(120,475,text="This is a Ellipse",fill="white")
c.create_text(370,475,text="This is a Half-ellipse",fill="white")
c.pack()
mainloop()

2b.draw a simple hut on the screen code
from tkinter import*
root=Tk()
c=Canvas (root,bg="lightblue",height=500,width=500)
c.create_rectangle(112,200,400,490, fill="yellow")
c.create_rectangle(250,275,130,475, fill="pink")
c.create_rectangle(280,230,388,319,fill="white")
c.create_polygon(45,198,255,38,449,198,fill="red")
c.create_oval(160,362,140,383,fill="black")
c.create_line(335, 230, 335, 320, width=5, fill="black")
c.create_line(280, 272, 389, 272, width=3, fill="black")
c.pack()
mainloop()

3a.draw the following shapes on the screen
1,concentric circle
import  turtle
r=10
n rings=int(input ("enter rings:"))
for i in range (n rings):
t.Circle (r*i)
t.up
t.sety(("r*i)*(-1))
t.down 
t.hide turtle()
turtle.done()

2,Rainbow
from tkinter  import *
root=Tk()
c=Canvas(root,bg="white",height=400,width=400)
c.create_arc(21,20,380,380,start=0,extent=180,fill="red")
c.create_arc(41,40,360,360,start=0,extent=180,fill="orange")
c.create_arc(61,60,340,340,start=0,extent=180,fill="yellow")
c.create_arc(81,80,320,320,start=0,extent=180,fill="green")
c.create_arc(101,100,300,300,start=0,extent=180,fill="blue")
c.create_arc(121,120,280,280,start=0,extent=180,fill="indigo")
c.create_arc(141,140,260,260,start=0,extent=180,fill="violet")
c.pack()
mainloop()

3,Olympic rings
import turtle
screen = turtle.Screen()
screen.bgcolor("black")
ring_turtle = turtle.Turtle()
ring_turtle.pensize(4)
def draw_ring(color, x, y):
    ring_turtle.penup()
    ring_turtle.color(color)
    ring_turtle.goto(x, y)
    ring_turtle.pendown()
    ring_turtle.circle(50)
draw_ring("blue", -120, 0)
draw_ring("pink", 0, 0)
draw_ring("red", 120, 0)
draw_ring("yellow", -60, -50)
draw_ring("green", 60, -50)
ring_turtle.hideturtle()
screen.exitonclick()

4. wap to implement dda line drawing algorithm
import matplotlib.pyplot   as plt
x1 = int(input("Enter x1: "))
y1 = int(input("Enter y1: "))
x2 = int(input("Enter x2: "))
y2 = int(input("Enter y2: "))
dx = x2 - x1
dy = y2 - y1
n = max(dx, dy)
print("N:",n)
print("x","\t","y","\t","dx","\t","dy")
print(x1,"\t",y1)
dxn=dx/n
dyn=dy/n
for i in range(n):
    plt.plot([x1,x2],[y1,y2],'r-')
    x1 =x1 +dx / n
    y1 =y1+dy / n
    print(x1,"\t",y1,"\t",dxn,"\t",dyn)
plt.show()

Enter x1: 5
Enter y1: 6
Enter x2: 8
Enter y2: 12
N: 6
x        y       dx      dy
5        6
5.5      7.0     0.5     1.0
6.0      8.0     0.5     1.0
6.5      9.0     0.5     1.0
7.0      10.0    0.5     1.0
7.5      11.0    0.5     1.0
8.0      12.0    0.5     1.0

5.write a program to implement bresenhams drawing algorithm
import matplotlib.pyplot as plt
x1 = int(input("Enter x1: "))
y1 = int(input("Enter y1: "))
x2 = int(input("Enter x2: "))
y2 = int(input("Enter y2: "))
temp=0
dx = x2 - x1
dy = y2 - y1
print("pk", "\t", "pk1", "\t", "x", "\t", "y")
pk = 2 * dy - dx
xnew = x1
ynew = y1
for i in range(1, dx-1):
    plt.plot([x1, x2], [y1, y2], 'b-')  
    if pk < 0:
        pk1 = pk + 2 * dy
        xnew = xnew + 1
        ynew = ynew
        temp=pk
        pk=pk1
        print(temp,"\t",pk1,"\t",xnew,"\t",ynew)
    if pk >= 0:
        pk1 = pk + 2 * dy - 2 * dx
        xnew = xnew + 1
        ynew = ynew + 1
        temp=pk
        pk=pk1
        print(temp,"\t",pk1,"\t",xnew,"\t",ynew)
plt.show()

Enter x1: 9
Enter y1: 18
Enter x2: 14
Enter y2: 22
pk       pk1     x       y
                 9       18
3        1       10      19
1        -1      11      20
-1       7       12      20
7        5       13      21
5        3       14      22

6.Bresenhems circle drawing algorithm
import matplotlib.pyplot as plt'
Xc=int (input("Enter x:"))
Yc=int(input("Enter y:"))
r=int (input("Enter radius:"))
x0=0
y0=r
yplot=0
temp=0
print("x0","\t y0",\tpk","/t xplot", \"t yplot")
print(x0,"\t",y0)
xK=x0
yK=yo
pk=3.2*r
while xplot <=yplot
plt.plot(int (xK,int yk),"b")
if pk<0:
xK=xK+1
yK=yK
pk1=pk+4*xK+6
temp=pk
x plot=xc + xk
y plot=yc + yk
print(xK,"\t",temp,"\t"pK1," xplot ,"\t",y plot)
if pK>=0:
xK=XK+1
yk=YK-1
pk1=pk+4*(xK-yK)+10
temp=pk
pk=pk1
x plot=xc+xk
y plot=yc+yk,
print (xK,"\t",yK,"\t",temp,"\t",pK+1,"\t",xplot,"\t",yplot)
plt.axis ('equal')
plt.show()

OR
import matplotlib.pyplot as plt

Xc = int(input("Enter x: "))
Yc = int(input("Enter y: "))
r = int(input("Enter radius: "))
x0 = 0
y0 = r
yplot = 0
temp = 0
print("x0","\t y0","\t pk","\t xplot","\t yplot")
print(x0, "\t", y0, "\t", temp, "\t", x0, "\t", y0)

xK = x0
yK = y0
pk = 3 - 2 * r

while x0 <= y0:
    plt.plot([Xc + xK, Xc - xK, Xc + xK, Xc - xK, Xc + yK, Xc - yK, Xc + yK, Xc - yK],
             [Yc + yK, Yc + yK, Yc - yK, Yc - yK, Yc + xK, Yc + xK, Yc - xK, Yc - xK], 'bo')

    if pk < 0:
        xK = xK + 1
        yK = yK
        pk1 = pk + 4 * xK + 6
        temp = pk
        xplot = Xc + xK
        yplot = Yc + yK
        print(xK, "\t", yK, "\t", temp, "\t", xplot, "\t", yplot)

    if pk >= 0:
        xK = xK + 1
        yK = yK - 1
        pk1 = pk + 4 * (xK - yK) + 10
        temp = pk
        xplot = Xc + xK
        yplot = Yc + yK
        print(xK, "\t", yK, "\t", temp, "\t", xplot, "\t", yplot)
    pk = pk1

plt.gca().set_aspect('equal', adjustable='box')
plt.show()

ENTER Y=10
ENTER radius:10

7.Preform 2d transformation using homogeneous  Co-ordinate System 
import numpy as np
import matplotlib.pyplot as plt

square = np.array([[1, 1, 1],
                   [1, -1, 1],
                   [-1, -1, 1],
                   [-1, 1, 1],
                   [1, 1, 1]])  # Closing the loop

def translation(tx, ty):
    return np.array([[1, 0, tx],
                     [0, 1, ty],
                     [0, 0, 1]])

def scaling(sx, sy):
    return np.array([[sx, 0, 0],
                     [0, sy, 0],
                     [0, 0, 1]])

def rotation(angle):
    cos_theta = np.cos(angle)
    sin_theta = np.sin(angle)
    return np.array([[cos_theta, -sin_theta, 0],
                     [sin_theta, cos_theta, 0],
                     [0, 0, 1]])

def shearing(shx, shy):
    return np.array([[1, shx, 0],
                     [shy, 1, 0],
                     [0, 0, 1]])

def apply_transformation(points, transformation):
    return np.dot(transformation, points.T).T

def plot_points(points, color='b'):
    plt.plot(points[:, 0], points[:, 1], color)

plt.title('Square before transformation')
plot_points(square)
plt.gca().set_aspect('equal', adjustable='box')
plt.show()

transformed_square = apply_transformation(square, translation(2, 3))
transformed_square = apply_transformation(transformed_square, scaling(2, 0.5))
transformed_square = apply_transformation(transformed_square, rotation(np.pi/4))
transformed_square = apply_transformation(transformed_square, shearing(0.5, 0.5))

plt.title('Square after transformation')
plot_points(transformed_square, color='r')
plt.gca().set_aspect('equal', adjustable='box')
plt.show()

8.create the screen saver with  animation
import turtle 
turtle.bg color("black") 
while(i):
for i range (70)
turtle.color("red")
turtle.circle(s*i)
turtle.color("yellow")
turtle.circle(-5*i)
turtle.color("blue")
turtle.circle(-7*i)
turtle.left(i)  

9.write a program for bauncing ball
import tkinter
import time
 

Window_Width=800

Window_Height=600

Ball_Start_XPosition = 50

Ball_Start_YPosition = 50

Ball_Radius = 30

Ball_min_movement = 5

Refresh_Sec = 0.01
 

def create_animation_window():
  Window = tkinter.Tk()
  Window.title("Python Guides")

  Window.geometry(f'{Window_Width}x{Window_Height}')
  return Window
 

def create_animation_canvas(Window):
  canvas = tkinter.Canvas(Window)
  canvas.configure(bg="Blue")
  canvas.pack(fill="both", expand=True)
  return canvas
 

def animate_ball(Window, canvas,xinc,yinc):
  ball = canvas.create_oval(Ball_Start_XPosition-Ball_Radius,
            Ball_Start_YPosition-Ball_Radius,
            Ball_Start_XPosition+Ball_Radius,
            Ball_Start_YPosition+Ball_Radius,
            fill="Red", outline="Black", width=4)
  while True:
    canvas.move(ball,xinc,yinc)
    Window.update()
    time.sleep(Refresh_Sec)
    ball_pos = canvas.coords(ball)
    # unpack array to variables
    al,bl,ar,br = ball_pos
    if al < abs(xinc) or ar > Window_Width-abs(xinc):
      xinc = -xinc
    if bl < abs(yinc) or br > Window_Height-abs(yinc):
      yinc = -yinc
 

Animation_Window = create_animation_window()
Animation_canvas = create_animation_canvas(Animation_Window)
animate_ball(Animation_Window,Animation_canvas, Ball_min_movement, Ball_min_movement)
 